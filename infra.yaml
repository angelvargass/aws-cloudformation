AWSTemplateFormatVersion: 2010-09-09

Description: Load balancing with auto-scaling group attached

Parameters:
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

  KeyName:
    Description: Name of an existing EC2 key pair to allow SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: ec2

  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI from the Parameter Store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  OperatorEmail:
    Description: The email address to notify when there are any scaling activities
    Type: String

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: At least two public subnets in different Availability Zones in the selected VPC
    Default: subnet-01fd1ba020b3f9889,subnet-07b82b480b1b6b9fe

  VPC:
    Type: "AWS::EC2::VPC::Id"
    Description: A virtual private cloud (VPC) that enables resources in public subnets to connect to the internet
    Default: vpc-06968fac19adde792

  ##Deployments
  S3BucketName:
    Description: "S3 bucket name for the app artifacts"
    Type: String
    Default: infra-app-qa

  CodeDeployName:
    Description: Codedeploy Application and Deployment Group name
    Type: String
    Default: codedeploy-app-qa

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: "infra-stack"
          Value: "infra-stack-ELBSecurityGroup"
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: "infra-stack"
          Value: "infra-stack-EC2SecurityGroup"
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::GetAtt:
              - ELBSecurityGroup
              - GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Tags:
        - Key: "infra-stack"
          Value: "infra-stack-EC2TargetGroup"
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Tags:
        - Key: "infra-stack"
          Value: "infra-stack-ApplicationLoadBalancer"
      Scheme: internet-facing
      Subnets: !Ref Subnets
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId

  ##Full access from EC2 to S3
  s3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: EC2S3Access

  #Attaching the S3 IAM Role created to the Autoscaling Instances
  ServerProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: cdInstanceProfile
      Roles:
        - !Ref s3Role

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref ServerProfile ##S3 Role attaching to each EC2 instance
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData: #Script to install Codedeploy agent and enable it
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install ruby-full wget -y
            cd /home/ubuntu
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile
            sudo service codedeploy-agent start

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: "infra-stack"
          Value: "infra-stack-NotificationTopic"
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: email

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: "3"
      MinSize: "1"
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
            ]
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      VPCZoneIdentifier: !Ref Subnets

  ##Deployments resources

  ##Code deploy service rules
  cdRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        - PolicyName: codedeploy-for-launch-template
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ec2:CreateTags
                  - ec2:RunInstances
                Resource: "*"
      RoleName: CodeDeployRole

  #New S3 bucket to upload source code zip file for codedeploy
  cdS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  #Codedeploy Application
  cdApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref CodeDeployName
      ComputePlatform: Server

  #Codedeploy Deployment group
  cdDG:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref cdApp
      AutoScalingGroups:
        - !Ref WebServerGroup
      DeploymentGroupName: !Ref CodeDeployName
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_REQUEST
      ServiceRoleArn: !GetAtt cdRole.Arn
#Outputs
